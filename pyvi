#! /usr/bin/env python
"""Script to open source file of a python module in vim.

In the middle of serious python hacking, you might like to see how a class or function is implemented.
This utility helps you by opening the module of interest in vim. 

Usage:
    $ pyvi os.path
"""

from __future__ import print_function

import sys
import os

from importlib.util import find_spec
from argparse import ArgumentParser


class ModuleSource(object):
    def __init__(self, module_name):
        self.name = module_name
        self.spec = find_spec(self.name)

    @property
    def source(self):
        module_source = self.spec.origin

        if module_source.endswith('.pyc'):
            module_source = module_source[:-1]

        return module_source

    def open_in_editor(self):
        if self.spec is not None:
            Editor().open(self.source)
        else:
            raise ModuleNotFoundError(f"No module named '{self.name}'", name=self.name, path=sys.path)


class Editor(object):
    def __init__(self):
        self.editor_cmd = os.getenv('PYVI_EDITOR', 'vim -R -M')

    def open(self, module_source):
        os.chdir(os.path.dirname(module_source))

        editor, args = self.editor_cmd.split(None, 1)
        os.execlp(editor, editor, *args.split(), module_source)


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('module_name')

    args = parser.parse_args()

    try:
        ModuleSource(args.module_name).open_in_editor()
    except ModuleNotFoundError as ex:
        print(ex.msg, 'Searched in: ', *('\t' + p for p in ex.path), sep='\n', file=sys.stderr)
        exit(1)
